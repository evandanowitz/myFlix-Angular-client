import { Component, OnInit, Input } from '@angular/core';

// You'll use this import to close the dialog on success
import { MatDialogRef } from '@angular/material/dialog';

// This import brings in the API calls created in 6.2
import { FetchApiDataService } from '../fetch-api-data.service';

// This import is used to display notifications back to the user
import { MatSnackBar } from '@angular/material/snack-bar';

// Using the @Component decorator to tell Angular that the class below is a component
// The decorator contains instructions for wiring up the the class with its stylesheet and template file
// The decorator also contains a 'selector' property that defines the custom HTML element, into which this component will render
// Makes it possible to use it in another HTML template file, such as the top level 'app.component.html' entry file (its parent), which was generated by Angular CLI
// Can use this form component in this HTML file and elsewhere, like this: <app-user-registration-form></app-user-registration-form>
@Component({
  selector: 'app-user-registration-form',
  templateUrl: './user-registration-form.component.html',
  styleUrl: './user-registration-form.component.scss'
})
export class UserRegistrationFormComponent implements OnInit {

  // The @Input decorator defines the component's input. You can also define the user data with this decorator
  // The 'userData' object will then be passed into the API call in the 'registerUser' function
  @Input() userData = { Username: '', Password: '', Email: '', Birthday: '' };

  constructor(
    public fetchApiData: FetchApiDataService,
    public dialogRef: MatDialogRef<UserRegistrationFormComponent>,
    public snackBar: MatSnackBar) { }

  // The ngOnIt method is called once component has received all its inputs (all its data-bound properties) from calling component--in other words, the real life user
  ngOnInit(): void {
  }

  // This is the function responsible for sending the form inputs to the backend
  registerUser(): void {
    console.log('User data before sending:', this.userData);
    this.fetchApiData.userRegistration(this.userData).subscribe(
      (result) => {
        console.log('Registration Successful:', result);
        this.dialogRef.close();
        this.snackBar.open('Registration Successful', 'OK', { duration: 2000 });
      },
      (error) => {
        console.error('Registration Failure:', error);
        this.snackBar.open(error, 'OK', { duration: 2000 });
      }
    );
  }
}